
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import *
import api
from datetime import datetime
from dateutil import relativedelta


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r".\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

class ViewSong(Frame):
    def __init__(self, parent, song, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent

        self.canvas = Canvas(
            self,
            bg = "#343638",
            height = 117,
            width = 540,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            270.0,
            58.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = self.canvas.create_image(
            489.0,
            55.0,
            image=self.image_image_2
        )

        self.canvas.create_text(
            93.0,
            19.0,
            anchor="nw",
            text=f"{song.name}",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.image_image_3 = api.getIcon(song.image, w=77, h=77)
        image_3 = self.canvas.create_image(
            48.0,
            53.0,
            image=self.image_image_3
        )

        self.canvas.create_text(
            93.0,
            36.0,
            anchor="nw",
            text=f"by {song.artist}",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            93.0,
            51.0,
            anchor="nw",
            text=f"Mapped by {song.mapper}",
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.image_image_4 = PhotoImage(
            file=relative_to_assets("image_4.png"))
        image_4 = self.canvas.create_image(
            485.0,
            25.0,
            image=self.image_image_4
        )

        self.canvas.create_text(
            485.0,
            25.0,
            anchor="center",
            text="%.2f pp" % song.pp,
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            490.0,
            56.5,
            anchor="center",
            text="%.2f%%" % song.accuracy,
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.image_image_5 = PhotoImage(
            file=relative_to_assets("image_5.png"))
        image_5 = self.canvas.create_image(
            507.0,
            89.0,
            image=self.image_image_5
        )

        self.canvas.create_text(
            507.0,
            89.5,
            anchor="center",
            text=f"X {song.misses}",
            fill="#FF0000",
            font=("Inter Bold", 16 * -1)
        )

        delta = relativedelta.relativedelta(datetime.now(), song.timeSet)
        if delta.years > 0:
            time_str = f'{delta.years}'
            if delta.years == 1:
                time_str += ' year'
            else:
                time_str += ' years'
        elif delta.months > 0:
            time_str = f'{delta.months}'
            if delta.months == 1:
                time_str += ' month'
            else:
                time_str += ' months'
        else:
            time_str = f'{delta.days}'
            if delta.days == 1:
                time_str += ' day'
            else:
                time_str += ' days'
        time_str += ' ago'
        self.canvas.create_text(
            15.0,
            94.0,
            anchor="nw",
            text=time_str,
            fill="#FFFFFF",
            font=("Inter", 16 * -1)
        )

        self.canvas.create_text(
            93.0,
            70.0,
            anchor="nw",
            text=f"{song.stars} stars",
            fill="#DB00FF",
            font=("Inter", 16 * -1)
        )

def build_song_frame(frame, songlist):
    for i in range(len(songlist)):
        song = songlist[i]
        if song != None:
            PlayerFrame = ViewSong(frame, song, width=540, height=117)
        else:
            PlayerFrame = Frame(frame, width=540, height=117, bg='#343638')
        PlayerFrame.grid(row=i, padx=10, pady=10)

if __name__ == "__main__":
    root = Tk()

    root.geometry("1100x300")
    
    canvas = Canvas(root)
    scrollbar = Scrollbar(root, orient="vertical", command=canvas.yview)
    papa_frame = Frame(canvas)

    length = 100

    left_frame = Frame(papa_frame)
    left_frame.configure(bg="#343638")
    left_songlist = api.LoadUserSongs(76561198404774259, length)
    build_song_frame(left_frame, left_songlist)
    left_frame.grid(column=0)

    right_frame = Frame(papa_frame)
    right_frame.configure(bg="#343638")
    right_songlist = api.LoadUserSongs(76561198333869741, length)
    right_songlist = api.getCorrespondingList(left_songlist, right_songlist)
    build_song_frame(right_frame, right_songlist)
    right_frame.grid(row=0, column=1)

    papa_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(
            scrollregion=canvas.bbox("all")
        )
    )

    canvas.create_window((0, 0), window=papa_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)
    canvas.configure(bg="#343638")
    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    root.resizable(False, False)
    root.mainloop()
